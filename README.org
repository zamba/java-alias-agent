* OUTPUT DOCUMENTATION
** EVENTS
The output consist of events that are separated by a newline character('\n').

** Identifiers and primitive fields
All identifiers are supposed to be larger than 0,
except primitive fields or if something else is stated.

Field stores/loads of primitive type are traced,
but not the values.


** OPCODE
The first character in every line is
a number that describes what type of
event it is according to below:

allocation	1
getfield 	2
storefield	3
methodcall	4
deallocation	5
return		6
storevar	7

** 1 Allocation
The allocation event is formed as: 
1 X Y Z

where:
X = LONG = Identifies the allocated object.
Y = TYPE = describes the allocated object's TYPE
Z = STRING/LONG = describes the caller to new.
                  If the caller is static Z will be a string,
		  else Z will be a long.
** 2 Field Load
The field load event is formed as:
2 X Z A K

where:
X = string = field name
Z = long = Identifies the loaded object
A = STRING/LONG = Identifies caller
K = STRING/LONG = Identifies callee

** 3 Field Store
The field store event is formed as:
3 X Z O A K

where:
X = string = field name
Z = long = Identifies the stored object
O = long = Identifies the object that was held by the field before... (the overwritten object)
           O can be 0.
A = STRING/LONG = Identifies caller
K = STRING/LONG = Identifies callee

** 4 Method Call
The variable store event is formed as:
4 X Z A K

where:
X = string = method name
Z = STRING/LONG = CALLER
A = STRING/LONG = CALLEE
K = LONG* = space separated tags that identifies
            the arguments passed to this method
** 5 Deallocation
The deallocation event is formed as:
5 X

where:
X = long = Identifies the garbage collected object

** 7 Variable Store
The variable store event is formed as:
7 X Y Z

where:
X = LONG = stored obj
Y = LONG = old value
Z = STRING/LONG = CALLER/CALLEE



* Benchmarks in Dacapo
  AVRORA
  BATIK
  ECLIPSE
  FOP
  h2
  jython
  luindex
  lusearch
  pmd
  sunflow
  tomcat
  tradebeans
  tradesoap
  xalan


* TODOs
** DONE Make use of zlib-dev instead of piping to gzip
** DONE Reimplement variable overwrites
** DONE Reimplement variable out of scopes
** TODO Implement AASTOREs

** DONE Instrument classes loaded with bootstrapclassloader too
   Find out why sigsegv occurs
** TODO If above works. Reimplement NEW
** TODO Extend command line options that handles instrumentation switches and output methods

** TODO Calculate how big part of the objs that are aliased.
** TODO Calculate how big part of the aliased obj that are ever used from multiple sources.
